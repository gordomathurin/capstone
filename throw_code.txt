# class Likes(models.Model):
#     anime_user = models.ForeignKey(
#         AnimeUser, on_delete=models.CASCADE, related_name="anime_user_like"
#     )
#     anime_post = models.ForeignKey(
#         AnimePost, on_delete=models.CASCADE, related_name="anime_post_like"
#     )




# class Feed(models.Model):
#     following = models.ForeignKey(
#         AnimeUser, on_delete=models.CASCADE, related_name="feed"
#     )
#     post = models.ForeignKey(AnimePost, on_delete=models.CASCADE, related_name="post")
#     anime_user = models.ForeignKey(
#         AnimeUser, on_delete=models.CASCADE, related_name="user"
#     )
#     date_post = models.DateField(auto_now_add=True)

#     def post_add(sender, instance, *args, **kwargs):
#         post = instance
#         anime_user = post.anime_user
#         anime_follower = Follow.objects.all().filter(following=anime_user)

#         for follower in anime_follower:
#             feed = Feed(
#                 post=post,
#                 anime_user=follower.follower,
#                 following=anime_user,
#             )
#             feed.save()

#     def __str__(self):
#         return f"{self.following} is viewing the latest post {self.post}"


# post_save.connect(Feed.post_add, sender=AnimePost)


# @login_required
# def like_view(request, post_id):
#     anime_user = request.user
#     anime_post = AnimePost.objects.get(id=post_id)
#     like_count = anime_post.likes

#     post_liked = Likes.objects.filter(
#         anime_user=anime_user, anime_post=anime_post
#     ).count()
#     print(post_liked)

#     if not post_liked:
#         post_liked = Likes.objects.create(anime_user=anime_user, anime_post=anime_post)
#         like_count = like_count + 1
#     else:
#         Likes.objects.filter(anime_user=anime_user, anime_post=anime_post).delete()
#         like_count = like_count - 1

#     anime_post.likes = like_count
#     anime_post.save()

#     return redirect("animefeed")


# path("like/<uuid:post_id>/", like_view, name="like"),